import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import requests
from math import radians, sin, cos, sqrt, atan2

# Replace with your own Geoapify API Key
GEOAPIFY_API_KEY = '87d451e4365441b79e31dc4cd63f532c'

def get_coordinates(place_name):
    url = f'https://api.geoapify.com/v1/geocode/search?text={place_name}&apiKey={GEOAPIFY_API_KEY}'
    response = requests.get(url).json()
    print("Geoapify response:", response)  # Debugging line to print the response
    
    if 'features' in response and response['features']:
        coords = response['features'][0]['geometry']['coordinates']
        return coords[1], coords[0]
    else:
        return None

def calculate_distance(lat1, lon1, lat2, lon2):
    R = 6371.0  # Earth radius in kilometers
    dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)
    a = sin(dlat / 2)**2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    distance = R * c
    return distance

def get_route(lat1, lon1, lat2, lon2):
    url = f'https://api.geoapify.com/v1/routing?waypoints={lat1},{lon1}|{lat2},{lon2}&mode=driving&apiKey={GEOAPIFY_API_KEY}'
    response = requests.get(url).json()
    print("Routing response:", response)  # Debugging line to print the response
    
    if 'features' in response and response['features']:
        route_length = response['features'][0]['properties']['distance'] / 1000  # Convert meters to kilometers
        return route_length
    else:
        return None

def on_calculate():
    place1 = entry_place1.get()
    place2 = entry_place2.get()
    
    coords1 = get_coordinates(place1)
    coords2 = get_coordinates(place2)
    
    if coords1 and coords2:
        lat1, lon1 = coords1
        lat2, lon2 = coords2
        distance = calculate_distance(lat1, lon1, lat2, lon2)
        route_length = get_route(lat1, lon1, lat2, lon2)
        
        if route_length is not None:
            messagebox.showinfo("Results", f"The distance between {place1} and {place2} is {distance:.2f} km.\nThe route length is {route_length:.2f} km.")
        else:
            messagebox.showinfo("Distance", f"The distance between {place1} and {place2} is {distance:.2f} km.\nCould not retrieve route length.")
    else:
        messagebox.showerror("Error", "Could not find one or both of the locations.")

# Create GUI window
root = tk.Tk()
root.title("Naash Distance Tracker")

# Load and resize background image
bg_image = Image.open("C:\\Users\\student\\Desktop\\Screenshot 2024-08-22 084350.png")  # Path to your background image
bg_image = bg_image.resize((1350, 900))  # Resize the image (width, height)
bg_photo = ImageTk.PhotoImage(bg_image)

# Set the resized image as the background
bg_label = tk.Label(root, image=bg_photo)
bg_label.place(relwidth=1, relheight=1)

# Create widgets and place them on the window
tk.Label(root, text="Place 1:", bg='lightblue').place(x=50, y=30)
entry_place1 = tk.Entry(root, width=50, bd=2, relief='solid')  # Black outline
entry_place1.place(x=150, y=30)

tk.Label(root, text="Place 2:", bg='lightblue').place(x=50, y=70)
entry_place2 = tk.Entry(root, width=50, bd=2, relief='solid')  # Black outline
entry_place2.place(x=150, y=70)

tk.Button(root, text="Calculate Distance and Route", command=on_calculate, bg='violet', fg='black').place(x=150, y=110)

root.geometry('1350x900')  # Adjust window size to match image size
root.mainloop()
